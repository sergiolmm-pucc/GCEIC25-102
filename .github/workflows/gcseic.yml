name: Deploy branch

on:
  push:
    branches: [main, stable, prod]

  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        type: choice
        required: true
        default: dev
        options:
          - dev
          - prod
          - stage
jobs:
  info:
    runs-on: ubuntu-latest
    steps:
      - name: Get code from repository
        uses: actions/checkout@v3
      - name: Instalar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'
      - name: Validate directory structure
        run: |
          echo "Repository structure:"
          ls -la
          echo "API directory content:"
          ls -la api || echo "API directory not found"
      - name: Exibir informações do projeto manualmente
        run: |
          echo "Informações do projeto"
          node -v
      - name: Gera saida do Github context sem execução direta
        run: |
          echo 'GitHub Context:' > github_context.txt
          echo '${{ toJSON(github) }}' >> github_context.txt
          cat github_context.txt
      - name: Mostra mensagem
        run: echo "Alo turma"

  getCode:
    runs-on: ubuntu-latest
    steps:
      - name: Get code from repositori to evaluate
        uses: actions/checkout@v3
      - name: lista diretorio
        run: ls -la
      - name: lista diretorio
        run: |
          ls -la api/tests 
          
      - name: lista diretorio
        run: |
          ls -la  api/test
          

  test:
    needs: getCode
    permissions: write-all
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api # Define o diretório base para todos os comandos
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Get Code from repository
        uses: actions/checkout@v3
      - name: lista diretorio
        run: |
          ls -la test
          ls -la tests 
          ls -la
          cat package.json
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Instala Dependencias
        run: npm ci
      # - name: Run Lint
      #   run:
      #     npm run lint
      # aqui uma entrada para cada teste
      - name: Roda os testes
        run: npm test

      - name: lista
        run: ls -la

      - name: Gera o Relatório dos testes
        uses: dorny/test-reporter@v1
        if: success() || failure() # roda de qualquer maneira
        with:
          name: JEST tests
          path: api/j*.xml
          reporter: jest-junit

  Deploy:
    needs: test
    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: api # Define o diretório base para todos os comandos
    steps:
 #     - name: Get Code
 #       uses: actions/checkout@v3
 #     - name: lista
 #       run: ls -la
 #     - name: Limpa arquivos antes da sincronização
 #       run: |
 #         echo "Removendo arquivos e diretórios que causam problemas na sincronização"
 #         # Remove o diretório de coverage
 #         rm -rf coverage || true
 #         # Remove outros arquivos grandes ou temporários se necessário
 #         rm -rf node_modules/.cache || true
 #         echo "Conteúdo do diretório após limpeza:"
 #         ls -la     

        
 #     - name: Install NodeJS
 #       uses: actions/setup-node@v3
 #       with:
 #         node-version: '22.x'
 #     - name: Validate API Directory
 #       run: |
 #         if [ ! -d "." ]; then
 #           echo "Error: API directory does not exist or is not accessible.";
 #           exit 1;
 #         fi
 #         echo "API directory content:"
 #         ls -la
 #     - name: Instala Dependencias
 #       run: npm ci
 #     - name: Validate API Directory
 #       run: |
 #         if [ ! -d "." ]; then
 #           echo "Error: API directory does not exist or is not accessible.";
 #           exit 1;
 #         fi
 #         echo "API directory content:"
 #         ls -la     
      - name: Faz sincronismo com o Glitch
        uses: kanadgupta/glitch-sync@v3.0.1
        with:
          auth-token: "${{ secrets.authToken }}"
          project-id: "${{ secrets.projectId }}"
          path: 'api'
      - name: lista
        run: ls -la

#  Deploy_slmm:
#    needs: test
#    runs-on: ubuntu-latest
#   # defaults:
#   #   run:
#   #     working-directory: api # Define o diretório base para todos os comandos
#    steps:
#  
#         #
#
#      - name: Git checkout    
#
#          uses: actions/checkout@v3
#
#      - name: git
#        run: |
#          # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
#          git --version
#          git config --global user.email "sergio.marques@puc-campinas.edu.br"
#          git config --global user.name "SLMM"
#
#      - name: Configurar chave SSH
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#          ssh-keyscan -H sergi3607.c35.integrator.host >> ~/.ssh/known_hosts
#
#
#      - name: lista
#        run: ls -la
#
#      - name: git2
#        run: |
#           #  ajusta a origem  e faz um git pull     
#           git remote set-url origin ssh://sergi3607@sergi3607.c35.integrator.host/home/sergi3607/applications/repositories/api102/.git
#           git push -u origin main

          
 #  git remote remove origin
 #  git remote add origin ${{ secrets.integratorGit }}
       
#  Deploy_sl2:    
#    runs-on: ubuntu-latest
#    steps:  
#      - uses: actions/checkout@v4
#
#      - name: Setup SSH
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#          ssh-keyscan -H sergi3607.c35.integrator.host >> ~/.ssh/known_hosts
#
#      - name: Debug SSH
#        run: |
#          ls -la ~/.ssh
#          ssh -v sergi3607@sergi3607.c35.integrator.host || true
#      - name: git
#        run: |
#          # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
#          git --version
#          git config --global user.email "sergio.marques@puc-campinas.edu.br"
#          git config --global user.name "SLMM"
#      - name: git2
#        run: |
#           #  ajusta a origem  e faz um git pull     
#           git remote set-url origin ssh://sergi3607@sergi3607.c35.integrator.host/home/sergi3607/applications/repositories/api102/.git
#           git push -u origin main
